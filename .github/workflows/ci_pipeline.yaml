name: Full CI/CD Pipeline

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: react-app
      IMAGE_TAG: ci
      ARTIFACTORY_URL: ghcr.io/${{ github.repository }}

    steps:
      #########################
      # 1️⃣ Checkout code & setup
      #########################
      - name: Checkout full repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      #########################
      # 2️⃣ Install dependencies
      #########################
      # Node for React / ESLint
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Node dependencies
        run: |
          npm init -y
          npm install --no-audit --no-fund --save-dev eslint eslint-plugin-react

      # Python for Bandit & tests
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install Python dependencies
        run: |
          pip install bandit pytest pytest-cov

      #########################
      # 3️⃣ Static Code Analysis (Linting)
      #########################
      - name: Run ESLint and save JSON report
        run: |
          mkdir -p reports
          npx eslint App.jsx -f json -o reports/eslint-report.json || true

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: reports/eslint-report.json

      #########################
      # 4️⃣ Security Scanning (Bandit)
      #########################
      - name: Run Bandit security analysis
        run: |
          mkdir -p reports
          bandit -r . -lll -f json -o reports/bandit_report.json || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: reports/bandit_report.json

      #########################
      # 5️⃣ Unit Test & Coverage
      #########################
      - name: Run Unit Tests with Coverage
        run: |
          mkdir -p reports
          pytest --cov=. --cov-report json:reports/coverage.json || true

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: reports/coverage.json

      #########################
      # 6️⃣ Build Docker Image
      #########################
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: false
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      #########################
      # 7️⃣ Scan Docker Image (Trivy)
      #########################
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Run Trivy scan
        run: |
          mkdir -p reports
          trivy image --format json --output reports/trivy-image-report.json ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || true

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: reports/trivy-image-report.json

      #########################
      # 8️⃣ Push to Artifact Repository (GitHub Container Registry)
      #########################
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ${{ env.ARTIFACTORY_URL }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
